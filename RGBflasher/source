/*
 * Copyright 2016-2022 NXP
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of NXP Semiconductor, Inc. nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * @file    RGBflasher.c
 * @brief   Application entry point.
 */
#include "MKL25Z4.h"
/* TODO: insert other include files here. */
void Delay(volatile unsigned int time){
	while(time--){
		;
	}
}
/* TODO: insert other definitions and declarations here. */
#define RED_LED	(18)		// PORT B
#define	GREEN_LED	(19)	// PORT B
#define BLUE_LED	(1)		// PORT D
#define MASK(x)	(1UL << (x))
/*
 * @brief   Application entry point.
 */
int main(void) {
	/* Initiating clock  to Port B and Port D */
	SIM->SCGC5 |= SIM_SCGC5_PORTB_MASK | SIM_SCGC5_PORTD_MASK;

	/* Enabling GPIOs */
	PORTB->PCR[RED_LED] &= ~PORT_PCR_MUX_MASK;
	PORTB->PCR[RED_LED] |= PORT_PCR_MUX(1);
	PORTB->PCR[GREEN_LED] &= ~PORT_PCR_MUX_MASK;
	PORTB->PCR[GREEN_LED] |= PORT_PCR_MUX(1);
	PORTD->PCR[BLUE_LED] &= ~PORT_PCR_MUX_MASK;
	PORTD->PCR[BLUE_LED] |= PORT_PCR_MUX(1);

	/* Setting up output ports */
	PTB->PDDR |= MASK(RED_LED) | MASK(GREEN_LED);
	PTD->PDDR |= MASK(BLUE_LED);

	/* Clear ports */
	PTB->PCOR |= MASK(RED_LED) | MASK(GREEN_LED);
	PTD->PCOR |= MASK(BLUE_LED);

	while(1){
		for(int i = 0;i < 8;i++){
			if(i & 2){
				PTB->PSOR |= MASK(GREEN_LED);
			} else {
				PTB->PCOR |= MASK(GREEN_LED);
			}
			if(i & 4){
				PTB->PSOR |= MASK(RED_LED);
			} else {
				PTB->PCOR |= MASK(RED_LED);
			}
			if (i & 6){
				PTD->PSOR |= MASK(BLUE_LED);
			} else {
				PTD->PCOR |= MASK(BLUE_LED);
			}
			Delay(2000000);
		}
	}
}
